---
- hosts: local
  strategy: "{{ strat }}"
  serial: 1
  
  tasks:
  #~ - name: ping tefooken time
    #~ become: yes
    #~ timetest:

  #~ - name: include som vars
    #~ action: include_vars dir=vars

  #~ - name: gen a json conf
    #~ blockinfile:
      #~ dest: /tmp/dudu.du
      #~ block: "{{ pen | to_nice_json }}"
      #~ create: yes

  #~ - name: test template
    #~ template:
      #~ src: /home/pato/a4e/infra/deploy/swarmmasters.json.tmpl
      #~ dest: /tmp/swarmmasters.json

  #~ - name: remove comments from a json
    #~ replace:
      #~ dest: /tmp/swarmmasters.json
      #~ regexp: '^\s*#.*'
      #~ replace: ''

  - name: create azure deploy
    azure_rm_deployment:
      state: present
      client_id: "{{ azure_accounts.fermov.username }}"
      secret: "{{ azure_accounts.fermov.sp_password }}"
      tenant: "{{ azure_accounts.fermov.tenant }}"
      subscription_id: "{{ azure_accounts.fermov.subscription_id }}"
      resource_group_name: TEST_ICLE
      location: "West Europe"
      wait_for_deployment_polling_period: 5
      #~ deployment_mode: complete
      deployment_mode: incremental
  
      template:
        $schema: "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
        contentVersion: "1.0.0.0"
        
        variables:
        # Storage Account
          storageAccountName: "[concat('webvm', uniqueString(resourceGroup().id))]"
          storageAccountType: Standard_LRS
          apiVersion: "2015-06-15"
        # Load Balancer
          lbName: webExt
          lbBEWebAddrPool: webBackend
          lbID: "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]"
          lbBEWebAddrPoolID: "[concat(variables('lbID'),'/backendAddressPools/', variables('lbBEWebAddrPool'))]"
          lbWeb80Port: 80
          lbWeb443Port: 443
          lbProbe80Name: tcp80
          lbProbe80ID: "[concat(variables('lbID'),'/probes/', variables('lbProbe80Name'))]"
          lbFEIpConfId: "[concat(variables('lbID'),'/frontendIPConfigurations/LoadBalancerFrontEnd')]"
        # Public IP
          lbDNSLabelPrefix: a4ewebprod
          lbPublicIPAddressName: "[concat(variables('lbName'), '-publicip')]"
        # Availability set
          webAvailabilitySetName: swarm-masters
          avs_UpdateDomainCount: 3
          avs_FaultDomainCount: 3
        # NSG
          nsg_name: "masters"
        # VM vars
          vmNamePrefix: a4emaster
          machineCount: 3
          vmSize: "Standard_DS1_V2"
          adminUsername: "a4everyone"
          sshKeyData: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC427m+Czx3yZuShcHzCloIq5rSsYkfUh43qksJiVCUxct+rUzjS9s1xkg5Wqoe8+LwIwohz/wPNcz9L6cVsoptXURLikrgoL+LOv7vpDC8pMeVLGGw7oPeapy3CExhPryRAt9aS0gLg6NzZ0jCMkqel/AISukhiK4Nv2jYkXNc5TJcm2j5vA59NsiosBnFaEvtjI9f3NPcv9wCJhr2MY0hnLwUt2rZvL0ONt/q2gg5usIwhssVg2JpmdUkfOUem3ita0VH33NQwfdwjOzuFX2G+WQjNdhv23NIZIomRfVjvG2QbDla1itbITBAH4mi5GQCvbm2Xw1DxjZOCSjtgJzh pato@mrcrab"
          sshKeyPath: "[concat('/home/',variables('adminUsername'),'/.ssh/authorized_keys')]"
          imagePublisher: "Canonical"
          imageOffer: "UbuntuServer"
          ubuntuOSVersion: "16.04.0-LTS"
        # VNET
          vnetName: swarmprod
          vnetID: "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]"
          addressPrefix: "10.1.0.0/16"
          subnetName: masters
          subnetRef: "[concat(variables('vnetID'),'/subnets/',variables ('subnetName'))]"
          subnetPure: "10.1.1."
          subnetPrefix: "[concat(variables('subnetPure'), '0/24')]"
  
        resources:
        - type: Microsoft.Storage/storageAccounts
          name: "[variables('storageAccountName')]"
          apiVersion: "[variables('apiVersion')]"
          location: "[resourceGroup().location]"
          properties:
            accountType: "[variables('storageAccountType')]"

        - type: Microsoft.Network/publicIPAddresses
          name: "[variables('lbPublicIPAddressName')]"
          apiVersion: "[variables('apiVersion')]"
          location: "[resourceGroup().location]"
          properties:
            publicIPAllocationMethod: Static
            dnsSettings:
              domainNameLabel: "[variables('lbDNSLabelPrefix')]"

        - type: Microsoft.Network/publicIPAddresses
          name: "[concat(variables('vmNamePrefix'), copyindex())]"
          apiVersion: "[variables('apiVersion')]"
          location: "[resourceGroup().location]"
          copy:
            name: ipLoop
            count: "[variables('machineCount')]"
          properties:
            publicIPAllocationMethod: Dynamic
            dnsSettings:
              domainNameLabel: "[concat(variables('vmNamePrefix'), copyindex())]"

        - type: "Microsoft.Compute/availabilitySets"
          name: "[variables('webAvailabilitySetName')]"
          apiVersion: "[variables('apiVersion')]"
          location: "[resourceGroup().location]"
          properties:
            platformUpdateDomainCount: "[variables('avs_UpdateDomainCount')]"
            platformFaultDomainCount: "[variables('avs_FaultDomainCount')]"

        - type: Microsoft.Network/networkSecurityGroups
          name: "[variables('nsg_name')]"
          apiVersion: "[variables('apiVersion')]"
          location: "[resourceGroup().location]"
          properties:
            securityRules:
            - name: ssh_rule
              properties:
                description: "Allow SSH"
                protocol: Tcp
                sourcePortRange: "*"
                destinationPortRange: 22
                sourceAddressPrefix: Internet
                destinationAddressPrefix: "*"
                access: Allow
                priority: 100
                direction: Inbound
            - name: web80_rule
              properties:
                description: "Allow WEB on 80"
                protocol: Tcp
                sourcePortRange: "*"
                destinationPortRange: "80"
                sourceAddressPrefix: "Internet"
                destinationAddressPrefix: "*"
                access: Allow
                priority: 101
                direction: Inbound
            - name: web443_rule
              properties:
                description: "Allow WEB on 443"
                protocol: Tcp
                sourcePortRange: "*"
                destinationPortRange: 443
                sourceAddressPrefix: Internet
                destinationAddressPrefix: "*"
                access: Allow
                priority: 102
                direction: Inbound

        - type: Microsoft.Network/virtualNetworks
          name: "[variables('vnetName')]"
          apiVersion: "[variables('apiVersion')]"
          location: "[resourceGroup().location]"
          dependsOn:
          - "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsg_name'))]"
          properties:
            addressSpace:
              addressPrefixes:
              - "[variables('addressPrefix')]"
            subnets:
             - name: "[variables('subnetName')]"
               properties:
                 addressPrefix: "[variables('subnetPrefix')]"
                 networkSecurityGroup:
                   id: "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg_name'))]"

        - type: Microsoft.Network/loadBalancers
          name: "[variables('lbName')]"
          apiVersion: "[variables('apiVersion')]"
          location: "[resourceGroup().location]"
          dependsOn:
             - "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPublicIPAddressName'))]"
          properties:
            frontendIPConfigurations:
            - name: LoadBalancerFrontEnd
              properties:
                publicIPAddress:
                  id: "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPublicIPAddressName'))]"
            backendAddressPools:
            - name: "[variables('lbBEWebAddrPool')]"
            loadBalancingRules:
            - name: web80
              properties:
                frontendIPConfiguration:
                  id: "[variables('lbFEIpConfId')]"
                backendAddressPool:
                  id: "[variables('lbBEWebAddrPoolID')]"
                probe:
                  id: "[variables('lbProbe80ID')]"
                protocol: tcp
                frontendPort: "[variables('lbWeb80Port')]"
                backendPort: "[variables('lbWeb80Port')]"
                enableFloatingIP: false
                idleTimeoutInMinutes: 5
            - name: web443
              properties:
                frontendIPConfiguration:
                  id: "[variables('lbFEIpConfId')]"
                backendAddressPool:
                  id: "[variables('lbBEWebAddrPoolID')]"
                probe:
                  id: "[variables('lbProbe80ID')]"
                protocol: "tcp"
                frontendPort: "[variables('lbWeb443Port')]"
                backendPort: "[variables('lbWeb443Port')]"
                enableFloatingIP: false
                idleTimeoutInMinutes: 5
            probes:
            - name: "[variables('lbProbe80Name')]"
              properties:
                protocol: tcp
                port: 80
                intervalInSeconds: 5
                numberOfProbes: 2

        - type: Microsoft.Network/networkInterfaces
          name: "[concat(variables('vmNamePrefix'), copyindex())]"
          apiVersion: "[variables('apiVersion')]"
          location: "[resourceGroup().location]"
          copy:
            name: webNicLoop
            count: "[variables('machineCount')]"
          dependsOn:
          - "[concat('Microsoft.Network/publicIPAddresses/', concat(variables('vmNamePrefix'), copyindex()))]"
          - "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
          - "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
          properties:
            ipConfigurations:
            - name: "ipconfig"
              properties:
                privateIPAllocationMethod: Static
                privateIPAddress: "[concat(variables('subnetPure'), add(4, copyindex()))]"
                publicIPAddress:
                  id: "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('vmNamePrefix'), copyindex()))]"
                subnet:
                  id: "[variables('subnetRef')]"
                loadBalancerBackendAddressPools:
                - id: "[concat(variables('lbID'), '/backendAddressPools/', variables('lbBEWebAddrPool'))]"



        - type: Microsoft.Compute/virtualMachines
          name: "[concat(variables('vmNamePrefix'), copyindex())]"
          apiVersion: "[variables('apiVersion')]"
          location: "[resourceGroup().location]"
          copy:
            name: webVmLoop
            count: "[variables('machineCount')]"
          dependsOn:
          - "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
          - "[concat('Microsoft.Network/networkInterfaces/', variables('vmNamePrefix'), copyindex())]"
          - "[concat('Microsoft.Compute/availabilitySets/', variables('webAvailabilitySetName'))]"
          properties:
            availabilitySet:
              id: "[resourceId('Microsoft.Compute/availabilitySets',variables('webAvailabilitySetName'))]"
            hardwareProfile:
              vmSize: "[variables('vmSize')]"
            osProfile:
               computername: "[concat(variables('vmNamePrefix'), copyindex())]"
               adminUsername: "[variables('adminUsername')]"
               linuxConfiguration:
                 disablePasswordAuthentication: "true"
                 ssh:
                   publicKeys:
                   - path: "[variables('sshKeyPath')]"
                     keyData: "[variables('sshKeyData')]"
            storageProfile:
              imageReference:
                publisher: "[variables('imagePublisher')]"
                offer: "[variables('imageOffer')]"
                sku: "[variables('ubuntuOSVersion')]"
                version: latest
              osDisk:
                name: osdisk
                vhd:
                  uri: "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/', variables('vmNamePrefix'), 'osdisk-',copyindex(),'.vhd')]"
                caching: ReadWrite
                createOption: FromImage
            networkProfile:
              networkInterfaces:
              - id: "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmNamePrefix'), copyindex()))]"
#~ ssh -i /home/pato/a4e/infra/keys/keys-website/prod-rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null a4everyone@a4emaster2.westeurope.cloudapp.azure.com            
            #~ "diagnosticsProfile: {
                #~ "bootDiagnostics: {
                    #~ "enabled: "false"
                   #~ # "storageUri: "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net')]"
                #~ }

  #~ - name: dockerfile parser test
    #~ find_used_apps:
      #~ docker_file: /home/pato/a4e/infra/images/weather/Dockerfile
      #~ downloads_dict: "{{ download_params }}"
    #~ register: dparse_out
  
  #~ - name: vzem vzem fm
    #~ get_url: "{{ item }}"
    #~ with_items: "{{ dparse_out.used_software }}"

    #~ - block:
  #~ - name: download java test
    #~ get_url:
    #~ with_nested:
      #~ - dparse_out.used_software
      #~ - download_params[item[0]]

  #~ - name: test template
    #~ template:
      #~ src: /home/pato/a4e/infra/images/weather/Dockerfile
      #~ dest: "{{ lookup('env', 'A4E_PROJ_ROOT') }}/Dockerfile"

  #~ - name: test template
    #~ template:
      #~ src: /home/pato/a4e/infra/images/weather/.dockerignore
      #~ dest: "{{ lookup('env', 'A4E_PROJ_ROOT') }}/.dockerignore"

  
  #~ - name: sysout dishit
    #~ local_action: sysout input='{{ dparse_out.used_software }}'
  
  #~ - name: deboog
    #~ debug: var="curracc.acckey"


  vars:
    azure_clutter:
      apiVersion: "[variables('apiVersion')]"
      location: "[resourceGroup().location]"
    
    pen: 
      variables:
      - local: "[resourceGroup().location]"
      - globan: 6ibeng
      testicles: true
    img_name: weather
    strat: linear
    curracc: nikolov
    
  vars_files:
    - "{{ lookup('env', 'A4E_PROJ_ROOT') }}/infra/secrets/azure-accounts_.yml"
